import requests
from bs4 import BeautifulSoup
import pandas as pd
import json

def func(url):
    proxies = {"http": "http://proxy.jpmchase.net:8443" ,"https": "http://proxy.jpmchase.net:8443"}

    response = requests.get(url,proxies=proxies)
    
    soup = BeautifulSoup(response.content, 'html.parser')
    
    product_name = soup.find('h1', class_='chakra-heading mxd-product-detail-layout-heading pdfi-kbivdx').text.strip()
    
    script_tag = soup.find('script', type='application/ld+json')
    if script_tag:
        json_data = script_tag.string
        data = json.loads(json_data)
        price = data['offers']['price']
    else:
        price = None
    
    return {
        'Product Name': product_name,
        'Price': price
    }

urls = [
    'https://www.praxis.nl/verf-laminaat-decoratie/verf/lakken/flexa-lak-strak-de-lak-zijdeglans-cr%C3%A8me-wit-ral-9001-750ml/5377082',
    'https://www.praxis.nl/verf-laminaat-decoratie/verf/latex/histor-latex-monodek-revolution-mat-wit-10l/10026886',
    'https://www.praxis.nl/verf-laminaat-decoratie/verf/lakken/sigma-lak-zwart-satijn-750ml/5638618',
    'https://www.praxis.nl/verf-laminaat-decoratie/verf/grondverf/wijzonol-grondverf-lak-mat-blauwgrijs-750ml/5291151',
    'https://www.praxis.nl/verf-laminaat-decoratie/verf/latex/flexa-muurverf-powerdek-muren-plafonds-10l-25/5283161'
]

product_data = [func(url) for url in urls]

df = pd.DataFrame(product_data)
df.to_excel('product_Praxis.xlsx', index=False)


import requests
from bs4 import BeautifulSoup
import pandas as pd

def func(url):
    proxies = {"http": "http://proxy.jpmchase.net:8443", "https": "http://proxy.jpmchase.net:8443"}

    response = requests.get(url, proxies=proxies)
        
    soup = BeautifulSoup(response.content, 'html.parser')
    
    product_name= soup.find('meta', {'itemprop':'name','content':True})['content']  

    price = soup.find('meta', {'itemprop':'price','content':True})['content'] 

    currency = soup.find('meta', {'itemprop':'priceCurrency','content':True})['content']    

    final_price = f"{currency} {price}"

    return {
        'Product Name': product_name,
        'Price': final_price
    }

urls = ['https://www.gamma.nl/assortiment/flexa-powerdek-wit-10-liter-25/p/B440828',
       'https://www.gamma.nl/assortiment/flexa-strak-in-de-lak-voor-binnen-ral-9010-gebroken-wit-zijdeglans-750-ml/p/B535884',
       'https://www.gamma.nl/assortiment/histor-monodek-revolution-wit-10-liter/p/B144564',
       'https://www.gamma.nl/assortiment/sigma-lak-interieur-9010-zuiverwit-zijdeglans-750-ml/p/B598778',
       'https://www.gamma.nl/assortiment/wijzonol-grondverf-dekkend-wit-750-ml/p/B430624'
       ]

product_data = [func(url) for url in urls]

df = pd.DataFrame(product_data)
df.to_excel('product_gamma.xlsx', index=False)


import requests
from bs4 import BeautifulSoup
import pandas as pd

def func(url):
    proxies = {"http": "http://proxy.jpmchase.net:8443", "https": "http://proxy.jpmchase.net:8443"}

    response = requests.get(url, proxies=proxies)
        
    soup = BeautifulSoup(response.content, 'html.parser')
    
    product_name_tag = soup.find('h1', itemprop='name')
    product_name = product_name_tag.text.strip() if product_name_tag else 'Product not found'
    
    price_tag = soup.find('div', class_='star-ratings-css')
    current_price = price_tag['data-product-current-price'].strip() if price_tag else 'Price not found'
    
    return {
        'Product Name':product_name, 
        'Price': current_price
    }

urls = ['https://www.karwei.nl/assortiment/flexa-powerdek-muurverf-mat-stralend-wit-10-l/p/B440827',
       'https://www.karwei.nl/assortiment/flexa-strak-in-de-lak-zijdeglans-ral9010-750-ml-watergedragen/p/B535884',
       'https://www.karwei.nl/assortiment/histor-monodek-revolution-latex-wit-10-liter/p/B144564',
       'https://www.karwei.nl/assortiment/sigma-houtlak-interieur-zijdeglans-ral-9010-750-ml/p/B598778',
       'https://www.karwei.nl/assortiment/wijzonol-grondlak-wit-750-ml/p/B430624'
       ]
product_data = [func(url) for url in urls]

df = pd.DataFrame(product_data)
df.to_excel('product_karwei.xlsx', index=False)



import requests
import json
import pandas as pd
proxies = {"http": "http://proxy.jpmchase.net:8443", "https": "http://proxy.jpmchase.net:8443"}

headers = {
    'accept': '*/*',
    'accept-language': 'en-US,en;q=0.9,it;q=0.8,es;q=0.7',
    'origin': 'https://www.wickes.co.uk',
    'priority': 'u=1, i',
    'referer': 'https://www.wickes.co.uk/',
    'sec-ch-ua': '"Chromium";v="136", "Google Chrome";v="136", "Not.A/Brand";v="99"',
    'sec-ch-ua-mobile': '?0',
    'sec-ch-ua-platform': '"Windows"',
    'sec-fetch-dest': 'empty',
    'sec-fetch-mode': 'cors',
    'sec-fetch-site': 'cross-site',
    'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36',
}

urls = [
    'https://rapidload.increasingly.co/increasingly_bundles?irb/cHJvZHVjdF9pZHM9MTM3NDY4JmNhdGVnb3J5X2lkPSZhcGlfa2V5PXdLUzh4eiZjbGllbnRfaWQ9JnBhZ2VfdHlwZT1jYXRhbG9nX3Byb2R1Y3RfdmlldyZjbGllbnRfdmlzaXRvcl9pZD0wNWRkMWNlNzQ4NjBlOGYxMjZkZGQ5MmVkZmQ4YTQ3MzIwYTExMTM3YjgmZnI9MSZpc190Yz0xJm5vX29mX2J1bmRsZXM9MTA=',
    'https://rapidload.increasingly.co/increasingly_bundles?irb/cHJvZHVjdF9pZHM9MTg0NjE3JmNhdGVnb3J5X2lkPSZhcGlfa2V5PXdLUzh4eiZjbGllbnRfaWQ9JnBhZ2VfdHlwZT1jYXRhbG9nX3Byb2R1Y3RfdmlldyZmcj0xJmNsaWVudF92aXNpdG9yX2lkPTA1ZGQxY2U3NDg2MGU4ZjEyNmRkZDkyZWRmZDhhNDczMjBhMTExMzdiOCZpc190YnhfbmV3PTEmbm9fb2ZfYnVuZGxlcz0x',
    'https://rapidload.increasingly.co/increasingly_bundles?irb/cHJvZHVjdF9pZHM9MTIyNDI4JmNhdGVnb3J5X2lkPSZhcGlfa2V5PXdLUzh4eiZjbGllbnRfaWQ9JnBhZ2VfdHlwZT1jYXRhbG9nX3Byb2R1Y3RfdmlldyZjbGllbnRfdmlzaXRvcl9pZD0wNWRkMWNlNzQ4NjBlOGYxMjZkZGQ5MmVkZmQ4YTQ3MzIwYTExMTM3YjgmZnI9MSZpc190Yz0xJm5vX29mX2J1bmRsZXM9MTA=',
    'https://rapidload.increasingly.co/increasingly_bundles?irb/cHJvZHVjdF9pZHM9MTA2NTAwJmNhdGVnb3J5X2lkPSZhcGlfa2V5PXdLUzh4eiZjbGllbnRfaWQ9JnBhZ2VfdHlwZT1jYXRhbG9nX3Byb2R1Y3RfdmlldyZmcj0xJmNsaWVudF92aXNpdG9yX2lkPTA1ZGQxY2U3NDg2MGU4ZjEyNmRkZDkyZWRmZDhhNDczMjBhMTExMzdiOA==',
    'https://rapidload.increasingly.co/increasingly_bundles?irb/cHJvZHVjdF9pZHM9MTQ3MDc2JmNhdGVnb3J5X2lkPSZhcGlfa2V5PXdLUzh4eiZjbGllbnRfaWQ9JnBhZ2VfdHlwZT1jYXRhbG9nX3Byb2R1Y3RfdmlldyZmcj0xJmNsaWVudF92aXNpdG9yX2lkPTA1ZGQxY2U3NDg2MGU4ZjEyNmRkZDkyZWRmZDhhNDczMjBhMTExMzdiOCZpc190YnhfbmV3PTEmbm9fb2ZfYnVuZGxlcz0x'
]

product_data = []

for url in urls:
    response = requests.get(url, headers=headers,proxies=proxies)
    
    data = response.json()
    product_details = data.get("ProductsDetail", [])
    
    product=product_details[0]
    product_name = product.get("ProductName", "Product name not found")
    special_price = product.get("SpecialPrice")
    price = special_price if special_price is not None else product.get("Price", "Price not found")
        
    product_data.append({
        'Product Name': product_name,
        'Price': price
    })

df = pd.DataFrame(product_data)

df.to_excel('Product_Wickes.xlsx', index=False)

print("Done")



import requests
import pandas as pd

headers = {
    'accept': 'application/json, text/plain, */*',
    'accept-language': 'en-US,en;q=0.9,it;q=0.8,es;q=0.7',
    'authorization': 'Bearer mNFqimmchEZycziasrOIyET5mbHE',
    'origin': 'https://www.toolstation.com',
    'priority': 'u=1, i',
    'referer': 'https://www.toolstation.com/dulux-trade-high-gloss-paint/p21785?secureweb=Teams',
    'sec-ch-ua': '"Chromium";v="136", "Google Chrome";v="136", "Not.A/Brand";v="99"',
    'sec-ch-ua-mobile': '?0',
    'sec-ch-ua-platform': '"Windows"',
    'sec-fetch-dest': 'empty',
    'sec-fetch-mode': 'cors',
    'sec-fetch-site': 'same-origin',
    'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36',
}

json_data = {
    'products': [
        '21785',
        '18930'
    ],
}

proxies = {"http": "http://proxy.jpmchase.net:8443", "https": "http://proxy.jpmchase.net:8443"}

response = requests.post('https://www.toolstation.com/ecom/v1/products/getProducts', headers=headers, json=json_data, proxies=proxies)
data = response.json()

product_list = []

product_data = data.get("data", [])

for product in product_data:
    product_name = product.get("full_name", "Product name not found")
    price = product.get("prices", {}).get("raw", {}).get("gross", "Price not found")
    
    product_list.append({
        'Product Name': product_name,
        'Price': price
    })

df = pd.DataFrame(product_list)
df.to_excel('Product_toolstation.xlsx', index=False)

print("Done")



import requests
from bs4 import BeautifulSoup

def func(url):
    proxies={"http": "http://approxy.jpmchase.net:10443" , "https": "http://approxy.jpmchase.net:10443"}
    
    response = requests.get(url,proxies=proxies)
    
    soup = BeautifulSoup(response.content, 'html.parser')
    
    product_name_tag = soup.find('h1', {'data-testid': 'product-name'})
    product_name = product_name_tag.text.strip() if product_name_tag else None
    
    product_price_tag = soup.find('span', {'data-testid': 'product-price'})
    product_price = product_price_tag.text.strip() if product_price_tag else None

    return{
        'Product Name':product_name, 
        'Price': product_price
    }

urls = ['https://www.diy.com/departments/dulux-trade-white-high-gloss-metal-wood-paint-2-5l/35991_BQ.prd',
       'https://www.diy.com/departments/dulux-walls-ceilings-pure-brilliant-white-matt-emulsion-paint-10l/1785813_BQ.prd',
       'https://www.diy.com/departments/leyland-white-gloss-metal-wood-paint-2-5l/1491791_BQ.prd',
       'https://www.diy.com/departments/dulux-walls-ceilings-pure-brilliant-white-matt-emulsion-paint-10l/1785813_BQ.prd',
       'https://www.diy.com/departments/valspar-white-matt-emulsion-paint-10l/1698002_BQ.prd',
       'https://www.diy.com/departments/valspar-white-matt-emulsion-paint-2-5l/1698004_BQ.prd',
       'https://www.diy.com/departments/leyland-pure-brilliant-white-matt-emulsion-paint-10l/1335443_BQ.prd',
       'https://www.diy.com/departments/ronseal-one-coat-fence-life-harvest-gold-matt-fence-shed-treatment-5l/1919522_BQ.prd',
       'https://www.diy.com/departments/dulux-trade-white-high-gloss-metal-wood-paint-2-5l/35991_BQ.prd',
       'https://www.diy.com/departments/sandtex-ultra-smooth-pure-brilliant-white-masonry-paint-5l/127469_BQ.prd',
       'https://www.diy.com/departments/goodhome-walls-ceilings-brilliant-white-vinyl-matt-emulsion-paint-2-5l/5059340231983_BQ.prd',
       'https://www.diy.com/departments/goodhome-classic-pure-brilliant-white-smooth-matt-masonry-paint-5l/3663602520795_BQ.prd',
       'https://www.diy.com/departments/dulux-weathershield-pure-brilliant-white-smooth-matt-masonry-paint-10l/5010212644447_BQ.prd'
       ]
product_data = [func(url) for url in urls]

df = pd.DataFrame(product_data)
df.to_excel('product_UKb&g.xlsx', index=False)




import requests
from bs4 import BeautifulSoup
import pandas as pd

def func(url):
    proxies={"http": "http://approxy.jpmchase.net:10443" , "https": "http://approxy.jpmchase.net:10443"}
    response = requests.get(url,proxies=proxies)
    html_content = response.text

    soup = BeautifulSoup(html_content, 'html.parser')

    product_name = soup.find('h1', id='product-title').text.strip()

    price_div = soup.find('div', class_='_5d34bd7a')
    price = price_div.text.strip()

    return product_name, price


urls = [
    'https://www.castorama.pl/farba-dulux-easycare-perlowy-bialy-2-5-l-id-1109981.html',
    'https://www.castorama.pl/rapidry-szary-bez-0-4l-id-1101006.html',
    'https://www.castorama.pl/emalia-do-kaloryferow-dekoral-biala-0-7-l-id-1028391.html',
    'https://www.castorama.pl/dekoral-k-l-deser-waniliowy-2-5l-id-1058667.html',
    'https://www.castorama.pl/emulsja-podkladowa-sniezka-grunt-biala-5-l-id-19975.html',
    'https://www.castorama.fr/peinture-murs-et-boiseries-dulux-valentine-creme-du-couleur-marron-glace-satin-2-5l-20-gratuit/3031520137096_CAFR.prd',
    'https://www.castorama.fr/peinture-murs-et-boiseries-dulux-valentine-color-resist-ivoire-satin-2-5l/3031520231312_CAFR.prd',
    'https://www.castorama.fr/laque-valenite-dulux-blanc-de-blanc-satin-2l/3031520150828_CAFR.prd',
    'https://www.castorama.fr/peinture-murs-et-plafonds-tollens-pro-mat-10l/3463975247851_CAFR.prd'
]

product_data = []

for url in urls:
    product_name, price = func(url)
    product_data.append({'Product Name': product_name, 'Price': price})

df = pd.DataFrame(product_data)
df.to_excel('product_castorama.xlsx', index=False)

print("Done")




import requests
import json
import re
import pandas as pd
from bs4 import BeautifulSoup

def func(url):
    proxies = {"http": "http://approxy.jpmchase.net:10443", "https": "http://approxy.jpmchase.net:10443"}

    headers = {
        'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
        'accept-language': 'en-US,en;q=0.9,it;q=0.8,es;q=0.7',
        'cache-control': 'max-age=0',
        'if-none-match': 'W/"o35x6oo6eb2d3d"',
        'priority': 'u=0, i',
        'referer': 'https://www.jernia.no/c/jotun-murprimer-drytech-0%2C75l/p/58018649?secureweb=Teams',
        'sec-ch-ua': '"Chromium";v="136", "Google Chrome";v="136", "Not.A/Brand";v="99"',
        'sec-ch-ua-mobile': '?0',
        'sec-ch-ua-platform': '"Windows"',
        'sec-fetch-dest': 'document',
        'sec-fetch-mode': 'navigate',
        'sec-fetch-site': 'same-origin',
        'sec-fetch-user': '?1',
        'upgrade-insecure-requests': '1',
        'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36',
    }

    response = requests.get(url, proxies=proxies, headers=headers)
    html_content = response.text

    soup = BeautifulSoup(html_content, 'html.parser')

    script_data = soup.find('script', type='application/ld+json')

    
    product_data = json.loads(script_data.string)

    product_name = product_data['name']
    price = product_data['offers']['price']
    currency = product_data['offers']['priceCurrency']

    return {
        'Product Name': product_name,
        'Price': f"{price} {currency}"
    }

urls = [
    # 'https://www.jernia.no/oppussing-og-vedlikehold/maling-og-oppussing/interi%C3%B8rmaling/veggmaling/jotun-lady-pure-color-a-base-2%2C7l/p/58017216',
    'https://www.jernia.no/c/jotun-murprimer-drytech-0%2C75l/p/58018649'
]

product_list = [func(url) for url in urls]

df = pd.DataFrame(product_list)
df.to_excel('product_Jernia.xlsx', index=False)





import requests
from bs4 import BeautifulSoup
import pandas as pd

def func(url):
    proxies = {"http": "http://approxy.jpmchase.net:10443", "https": "http://approxy.jpmchase.net:10443"}
    response = requests.get(url,proxies=proxies)
    html_content = response.text

    soup = BeautifulSoup(html_content, 'html.parser')

    product_name_tag = soup.find('h1', class_='bd-ProductCard-title')
    product_name = None
    if product_name_tag:
        name_span = product_name_tag.find('span', itemprop='name')
        if name_span:
            product_name = name_span.text.strip()

    price_integer_tag = soup.find('span', class_='bd-Price-current')
    price = None
    if price_integer_tag:
        price = price_integer_tag.text.strip()


    currency_tag = soup.find('meta', itemprop='priceCurrency')
    currency = None
    if currency_tag:
        currency = currency_tag['content']

    return {
        'Product Name': product_name,
        'Price': f"{currency} {price}" if price and currency else None
    }

urls = [
    'https://www.bricodepot.fr/angers-beaucouze/tollens-pro-murs-et-plafonds-mat-10-l-/prod75488/',
    'https://www.bricodepot.fr/angers-beaucouze/peinture-mur-interieur-2-en-1-satin-25-l-blanc-pur/prod85495/',
    'https://www.bricodepot.fr/angers-beaucouze/peinture-interieur-satin-2-l-beige-bauxite/prod85586/',
    'https://www.bricodepot.fr/angers-beaucouze/peinture-murs-et-boiseries-interieure-color-resist-acrylique-satin-porcelaine-25-l/prod62099/',
    'https://www.bricodepot.fr/angers-beaucouze/peinture-glycero-boiseries-satin-blanc2-l/prod76834/'
]

product_data = [func(url) for url in urls]

df = pd.DataFrame(product_data)
df.to_excel('product_brico.xlsx', index=False)







