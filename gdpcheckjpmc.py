# -*- coding: utf-8 -*-
"""GDPcheckJPMC.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nNsR74IvpHeyDKjlQvH8J_fAbwv9-HJB
"""

import pandas as pd
from dateutil.relativedelta import relativedelta

data = pd.read_excel("")

df = pd.DataFrame({
    'PublishedDate': ['05-01-23', '15-04-23', '30-07-23', '01-11-23', '01-01-24']  # Break at index 3
})

def checkPublishedDateColumn(df):
  num_rows_in_column_A = len(df)
  print(num_rows_in_column_A)
  df['PublishedDate'] = pd.to_datetime(df['PublishedDate'], format='%d-%m-%y')
  start_date = df['PublishedDate'].iloc[0].replace(day=1)

  expected_dates = []
  for i in range(1, len(df)):
    expected = start_date + relativedelta(months=3*i)
    actual = df['PublishedDate'].iloc[i].replace(day=1)

    if expected != actual:
        print(f"Row {i} breaks the quarterly pattern.")
        print(f"Expected MM-YY: {expected.strftime('%m-%y')}")
        print(f"Found MM-YY:    {actual.strftime('%m-%y')}")
        print(f"Last correct date was at row {i-1}: {df['PublishedDate'].iloc[i-1].strftime('%d-%m-%y')}")
        break
  else:
      print("âœ… All dates follow the quarterly MM-YY pattern.")

checkPublishedDateColumn(df)

def checkDataPresence(df):
  num_rows_in_column_A = len(df)
  print(num_rows_in_column_A)
  df['PublishedDate'] = pd.to_datetime(df['PublishedDate'], format='%d-%m-%y')

  date_cols = [col for col in df.columns if col != 'A']
  col_date_map = {col: pd.to_datetime(col, format='%d-%m-%y') for col in date_cols}


  violations = []
  for i in range(len(df)):
    quarter_end = df.loc[i, 'PublishedDate']

    for col in date_cols:
        col_date = col_date_map[col]
        cell_value = df.loc[i, col]

        if pd.notnull(cell_value) and str(cell_value).strip() != '' and col_date > quarter_end:
            violations.append({
                'row': i,
                'column': col,
                'column_date': col_date.strftime('%d-%m-%y'),
                'quarter_end': quarter_end.strftime('%d-%m-%y'),
                'value': cell_value
            })
            break

  if violations:
      for v in violations:
          print(f"Row {v['row']} - Column '{v['column']}' (date {v['column_date']}) "
                f"exceeds quarter end {v['quarter_end']}")
  else:
      print("All column dates are within their row's quarter.")

def is_filled(cell):
    """Return True if cell contains data (not null, not empty string/whitespace)."""
    return pd.notnull(cell) and str(cell).strip() != ''

def check_rows_have_data(df, exclude_col='PublishedDate'):
    cols_to_check = [col for col in df.columns if col != exclude_col]

    rows_no_data = []

    for i, row in df.iterrows():
        if not any(is_filled(row[col]) for col in cols_to_check):
            rows_no_data.append(i)

    return rows_no_data